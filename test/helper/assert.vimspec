let s:assert = themis#helper('assert')

Describe helper-assert

  Describe .skip()
    It throws a skip report with a message
      call s:check_throw('skip', ['message'], '^themis:\s*report:\s*SKIP:.*message$')
    End
  End

  Describe .todo()
    It throws a todo report with a message
      call s:check_throw('todo', ['message'], '^themis:\s*report:\s*todo:.*message$')
    End
    It uses default message when the message is omitted
      call s:check_throw('todo', [], '^themis:\s*report:\s*todo:\s*TODO$')
    End
  End

  Describe .fail()
    It throws an error report with a message
      call s:check_throw('fail', ['This test is the fate going failed.'], 'This test is the fate going failed.')
    End
  End

  Describe .true()
    It checks the value is true
      call s:assert.true(1)
      if exists('v:true')
        call s:assert.true(v:true)
      endif
    End
    It checks the value strictly
      call s:check_throw('true', [100])
      call s:check_throw('true', ['1'])
      call s:check_throw('true', [1.0])
      call s:check_throw('true', ['true'])
      call s:check_throw('true', [[1]])
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.true(1))
    End
    It accepts an optional message
      call s:assert.true(1, 'error message')
      call s:check_throw('true', [0, 'error message'], 'error message')
    End
  End

  Describe .false()
    It checks the value is false
      call s:assert.false(0)
      if exists('v:false')
        call s:assert.false(v:false)
      endif
    End
    It checks the value strictly
      call s:check_throw('false', [''])
      call s:check_throw('false', [0.0])
      call s:check_throw('false', [[]])
      call s:check_throw('false', ['false'])
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.false(0))
    End
    It accepts an optional message
      call s:assert.false(0, 'error message')
      call s:check_throw('false', [1, 'error message'], 'error message')
    End
  End

  Describe .truthy()
    It checks the value is not zero
      call s:assert.truthy(1)
      call s:assert.truthy(100)
      call s:assert.truthy('1')
      if exists('v:true')
        call s:assert.truthy(v:true)
      endif
    End
    It throws a report when the value is zero or not a number
      call s:check_throw('truthy', [0])
      call s:check_throw('truthy', [1.0])
      call s:check_throw('truthy', ['truthy'])
      call s:check_throw('truthy', ['0'])
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.truthy(1))
    End
    It accepts an optional message
      call s:assert.truthy(1, 'error message')
      call s:check_throw('truthy', [0, 'error message'], 'error message')
    End
  End

  Describe .falsy()
    It checks the value is zero
      call s:assert.falsy(0)
      call s:assert.falsy('')
      call s:assert.falsy('0')
      if exists('v:false')
        call s:assert.falsy(v:false)
      endif
    End
    It throws a report when the value is not zero or not a number
      call s:check_throw('falsy', [1])
      call s:check_throw('falsy', [0.0])
      call s:check_throw('falsy', ['100falsy'])
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.falsy(0))
    End
    It accepts an optional message
      call s:assert.falsy(0, 'error message')
      call s:check_throw('falsy', [1, 'error message'], 'error message')
    End
  End

  Describe .compare()
    It does not throw a report when comparing succeeded
      call s:assert.compare(10, '==', 10)
      call s:assert.compare('hoge', '==?', 'HOGE')
      call s:assert.compare(1, 'isnot', [])
    End
    It throws a report when comparing failed
      call s:check_throw('compare', [3, '<', 0], 'The right expression was expected')
      call s:check_throw('compare', [3, '==', []], 'The right expression was expected')
    End
    It throws a report when an error occurred
      call s:check_throw('compare', [0, '?', 0], 'Unexpected error occurred while evaluating the comparing')
      call s:check_throw('compare', [3, '===', []], 'Unexpected error occurred while evaluating the comparing')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.compare(1, '==', 1))
    End
    It accepts an optional message
      call s:assert.compare(10, '==', 10, 'error message')
      call s:check_throw('compare', [3, '<', 0, 'error message'], 'error message')
      call s:check_throw('compare', [0, '?', 0, 'error message'], 'error message')
    End
  End

  Describe .equals()
    It checks actual equals to expect
      call s:assert.equals(5 + 5, 10)
      call s:assert.equals(2.0 + 5.0, 7)
      call s:assert.equals('hoge' . 'huga', 'hogehuga')
      call s:assert.equals('10', 10)
      call s:assert.equals(range(3), [0, 1, 2])
    End
    It throws a report when values are not equivalent
      call s:check_throw('equals', [1 + 1, 11], 'The equivalent values were expected')
      call s:check_throw('equals', ['hoge', 'HOGE'], 'The equivalent values were expected')
      call s:check_throw('equals', [[], {}], 'The equivalent values were expected')
    End
    Context with string and number
      It checks a string is valid as a number
        call s:check_throw('equals', ['', 0], 'The equivalent values were expected')
        call s:check_throw('equals', [0, ''], 'The equivalent values were expected')
      End
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.equals(1, 1))
    End
    It accepts an optional message
      call s:assert.equals(5 + 5, 10, 'error message')
      call s:check_throw('equals', [1 + 1, 11, 'error message'], 'error message')
    End
  End

  Describe .not_equals()
    It checks actual not equals to expect
      call s:assert.not_equals(5 + 5, 55)
      call s:assert.not_equals('hoge' . 'huga', 'hugahoge')
      call s:assert.not_equals(1.2, 12)
      call s:assert.not_equals([], {})
    End
    It throws a report when values are equivalent
      call s:check_throw('not_equals', [1 + 1, 2], 'Not the equivalent values were expected')
      call s:check_throw('not_equals', ['hoge', 'hoge'], 'Not the equivalent values were expected')
    End
    Context with string and number
      It checks a string is valid as a number
        call s:assert.not_equals('', 0)
        call s:assert.not_equals(0, '')
      End
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.not_equals(0, 1))
    End
    It accepts an optional message
      call s:assert.not_equals(5 + 5, 55, 'error message')
      call s:check_throw('not_equals', [1 + 1, 2, 'error message'], 'error message')
    End
  End

  Describe .same()
    It checks actual value and expected value are same
      call s:assert.same(5 + 5, 10)
      call s:assert.same('hoge' . 'huga', 'hogehuga')
      let list = [1]
      call s:assert.same(list, list)
    End
    It throws a report when values are not same
      call s:check_throw('same', [10, '10'], 'The same values were expected')
      call s:check_throw('same', [{}, {}], 'The same values were expected')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.same(0, 0))
    End
    It accepts an optional message
      call s:assert.same(5 + 5, 10, 'error message')
      call s:check_throw('same', [10, '10', 'error message'], 'error message')
    End
  End

  Describe .not_same()
    It checks actual value and expected value are not same
      call s:assert.not_same(10.0, 10)
      call s:assert.not_same(10, '10')
      call s:assert.not_same({}, {})
    End
    It throws a report when values are same
      call s:check_throw('not_same', [10, 10], 'Not the same values were expected')
      let list = [1]
      call s:check_throw('not_same', [list, list], 'Not the same values were expected')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.not_same({}, {}))
    End
    It accepts an optional message
      call s:assert.not_same(10.0, 10, 'error message')
      call s:check_throw('not_same', [10, 10, 'error message'], 'error message')
    End
  End

  Describe .match()
    It checks the value matches the pattern
      call s:assert.match('hoge', '^hoge$')
      call s:assert.match('101010', '^\%(\d\d\)*$')
    End
    It throws a report when the value does not match the pattern
      call s:check_throw('match', ['hoge', 'huga'], 'Match was expected')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.match('hoge', '^hoge$'))
    End
    It accepts an optional message
      call s:assert.match('hoge', '^hoge$', 'error message')
      call s:check_throw('match', ['hoge', 'huga', 'error message'], 'error message')
    End
  End

  Describe .not_match()
    It checks the value does match the pattern
      call s:assert.not_match('hoge', '^huga$')
    End
    It throws a report when the value matches to the pattern
      call s:check_throw('not_match', ['hoge', '^hoge$'], 'Not match was expected')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.not_match('hoge', '^huga$'))
    End
    It accepts an optional message
      call s:assert.not_match('hoge', '^huga$', 'error message')
      call s:check_throw('not_match', ['hoge', '^hoge$', 'error message'], 'error message')
    End
  End

  Describe .is_number()
    It checks the type of value is a number
      call s:assert.is_number(1)
    End
    It throws a report when the type of value is not a number
      call s:check_throw('is_number', [1.0], 'The type of value was expected to be number')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_number(1))
    End
    It accepts an optional message
      call s:assert.is_number(1, 'error message')
      call s:check_throw('is_number', [1.0, 'error message'], 'error message')
    End
  End

  Describe .is_not_number()
    It checks the type of value is not a number
      call s:assert.is_not_number(1.0)
    End
    It throws a report when the type of value is a number
      call s:check_throw('is_not_number', [1], 'The type of value was not expected to be number')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_not_number(1.0))
    End
    It accepts an optional message
      call s:assert.is_not_number(1.0, 'error message')
      call s:check_throw('is_not_number', [1, 'error message'], 'error message')
    End
  End

  Describe .is_string()
    It checks the type of value is a string
      call s:assert.is_string('str')
    End
    It throws a report when the type of value is not a string
      call s:check_throw('is_string', [0], 'The type of value was expected to be string')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_string(''))
    End
    It accepts an optional message
      call s:assert.is_string('str', 'error message')
      call s:check_throw('is_string', [0, 'error message'], 'error message')
    End
  End

  Describe .is_not_string()
    It checks the type of value is not a string
      call s:assert.is_not_string(0)
    End
    It throws a report when the type of value is a string
      call s:check_throw('is_not_string', ['str'], 'The type of value was not expected to be string')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_not_string(0))
    End
    It accepts an optional message
      call s:assert.is_not_string(0, 'error message')
      call s:check_throw('is_not_string', ['str', 'error message'], 'error message')
    End
  End

  Describe .is_func()
    It checks the type of value is a function
      call s:assert.is_func(function('function'))
    End
    It throws a report when the type of value is not a function
      call s:check_throw('is_func', [0], 'The type of value was expected to be func')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_func(function('function')))
    End
    It accepts an optional message
      call s:assert.is_func(function('function'), 'error message')
      call s:check_throw('is_func', [0, 'error message'], 'error message')
    End
  End

  Describe .is_not_func()
    It checks the type of value is not a function
      call s:assert.is_not_func(0)
    End
    It throws a report when the type of value is a function
      call s:check_throw('is_not_func', [function('function')], 'The type of value was not expected to be func')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_not_func(0))
    End
    It accepts an optional message
      call s:assert.is_not_func(0, 'error message')
      call s:check_throw('is_not_func', [function('function'), 'error message'], 'error message')
    End
  End

  Describe .is_list()
    It checks the type of value is a list
      call s:assert.is_list([])
    End
    It throws a report when the type of value is not a list
      call s:check_throw('is_list', [0], 'The type of value was expected to be list')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_list([]))
    End
    It accepts an optional message
      call s:assert.is_list([], 'error message')
      call s:check_throw('is_list', [0, 'error message'], 'error message')
    End
  End

  Describe .is_not_list()
    It checks the type of value is not a list
      call s:assert.is_not_list(0)
    End
    It throws a report when the type of value is a list
      call s:check_throw('is_not_list', [[]], 'The type of value was not expected to be list')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_not_list(0))
    End
    It accepts an optional message
      call s:assert.is_not_list(0, 'error message')
      call s:check_throw('is_not_list', [[], 'error message'], 'error message')
    End
  End

  Describe .is_dict()
    It checks the type of value is a dictionary
      call s:assert.is_dict({})
    End
    It throws a report when the type of value is not a dictionary
      call s:check_throw('is_dict', [0], 'The type of value was expected to be dict')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_dict({}))
    End
    It accepts an optional message
      call s:assert.is_dict({}, 'error message')
      call s:check_throw('is_dict', [0, 'error message'], 'error message')
    End
  End

  Describe .is_not_dict()
    It checks the type of value is not a dictionary
      call s:assert.is_not_dict(0)
    End
    It throws a report when the type of value is a dictionary
      call s:check_throw('is_not_dict', [{}], 'The type of value was not expected to be dict')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_not_dict(0))
    End
    It accepts an optional message
      call s:assert.is_not_dict(0, 'error message')
      call s:check_throw('is_not_dict', [{}, 'error message'], 'error message')
    End
  End

  Describe .is_float()
    It checks the type of value is a float
      call s:assert.is_float(1.0)
    End
    It throws a report when the type of value is not a float
      call s:check_throw('is_float', [0], 'The type of value was expected to be float')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_float(0.0))
    End
    It accepts an optional message
      call s:assert.is_float(1.0, 'error message')
      call s:check_throw('is_float', [0, 'error message'], 'error message')
    End
  End

  Describe .is_not_float()
    It checks the type of value is not a float
      call s:assert.is_not_float(0)
    End
    It throws a report when the type of value is a float
      call s:check_throw('is_not_float', [1.0], 'The type of value was not expected to be float')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.is_not_float(0))
    End
    It accepts an optional message
      call s:assert.is_not_float(0, 'error message')
      call s:check_throw('is_not_float', [1.0, 'error message'], 'error message')
    End
  End

  if 800 <= v:version
    Describe .is_bool()
      It checks the type of value is a bool
        call s:assert.is_bool(v:true)
      End
      It throws a report when the type of value is not a bool
        call s:check_throw('is_bool', [1], 'The type of value was expected to be bool')
      End
      It returns truthy value when the check was successful
        call s:assert.truthy(s:assert.is_bool(v:false))
      End
      It accepts an optional message
        call s:assert.is_bool(v:true, 'error message')
        call s:check_throw('is_bool', [0, 'error message'], 'error message')
      End
    End

    Describe .is_not_bool()
      It checks the type of value is not a bool
        call s:assert.is_not_bool(1)
      End
      It throws a report when the type of value is a bool
        call s:check_throw('is_not_bool', [v:true], 'The type of value was not expected to be bool')
      End
      It returns truthy value when the check was successful
        call s:assert.truthy(s:assert.is_not_bool(0))
      End
      It accepts an optional message
        call s:assert.is_not_bool(1, 'error message')
        call s:check_throw('is_not_bool', [v:false, 'error message'], 'error message')
      End
    End

    Describe .is_none()
      It checks the type of value is a none
        call s:assert.is_none(v:none)
      End
      It throws a report when the type of value is not a none
        call s:check_throw('is_none', [v:false], 'The type of value was expected to be none')
      End
      It returns truthy value when the check was successful
        call s:assert.truthy(s:assert.is_none(v:null))
      End
      It accepts an optional message
        call s:assert.is_none(v:null, 'error message')
        call s:check_throw('is_none', [v:true, 'error message'], 'error message')
      End
    End

    Describe .is_not_none()
      It checks the type of value is not a none
        call s:assert.is_not_none(v:true)
      End
      It throws a report when the type of value is a none
        call s:check_throw('is_not_none', [v:none], 'The type of value was not expected to be none')
      End
      It returns truthy value when the check was successful
        call s:assert.truthy(s:assert.is_not_none(v:false))
      End
      It accepts an optional message
        call s:assert.is_not_none(v:false, 'error message')
        call s:check_throw('is_not_none', [v:null, 'error message'], 'error message')
      End
    End

    Describe .is_job()
      It checks the type of value is a job
        call s:assert.is_job(test_null_job())
      End
      It throws a report when the type of value is not a job
        call s:check_throw('is_job', [v:null], 'The type of value was expected to be job')
      End
      It returns truthy value when the check was successful
        call s:assert.truthy(s:assert.is_job(test_null_job()))
      End
      It accepts an optional message
        call s:assert.is_job(test_null_job(), 'error message')
        call s:check_throw('is_job', [v:null, 'error message'], 'error message')
      End
    End

    Describe .is_not_job()
      It checks the type of value is not a job
        call s:assert.is_not_job(v:null)
      End
      It throws a report when the type of value is a job
        call s:check_throw('is_not_job', [test_null_job()], 'The type of value was not expected to be job')
      End
      It returns truthy value when the check was successful
        call s:assert.truthy(s:assert.is_not_job(v:null))
      End
      It accepts an optional message
        call s:assert.is_not_job(v:null, 'error message')
        call s:check_throw('is_not_job', [test_null_job(), 'error message'], 'error message')
      End
    End

    Describe .is_channel()
      It checks the type of value is a channel
        call s:assert.is_channel(test_null_channel())
      End
      It throws a report when the type of value is not a channel
        call s:check_throw('is_channel', [v:null], 'The type of value was expected to be channel')
      End
      It returns truthy value when the check was successful
        call s:assert.truthy(s:assert.is_channel(test_null_channel()))
      End
      It accepts an optional message
        call s:assert.is_channel(test_null_channel(), 'error message')
        call s:check_throw('is_channel', [v:null, 'error message'], 'error message')
      End
    End

    Describe .is_not_channel()
      It checks the type of value is not a channel
        call s:assert.is_not_channel(v:null)
      End
      It throws a report when the type of value is a channel
        call s:check_throw('is_not_channel', [test_null_channel()], 'The type of value was not expected to be channel')
      End
      It returns truthy value when the check was successful
        call s:assert.truthy(s:assert.is_not_channel(v:null))
      End
      It accepts an optional message
        call s:assert.is_not_channel(v:null, 'error message')
        call s:check_throw('is_not_channel', [test_null_channel(), 'error message'], 'error message')
      End
    End

  endif

  if exists('*test_null_blob')
    Describe .is_blob()
      It checks the type of value is a blob
        call s:assert.is_blob(test_null_blob())
      End
      It throws a report when the type of value is not a blob
        call s:check_throw('is_blob', [v:null], 'The type of value was expected to be blob')
      End
      It returns truthy value when the check was successful
        call s:assert.truthy(s:assert.is_blob(test_null_blob()))
      End
      It accepts an optional message
        call s:assert.is_blob(test_null_blob(), 'error message')
        call s:check_throw('is_blob', [v:null, 'error message'], 'error message')
      End
    End

    Describe .is_not_blob()
      It checks the type of value is not a blob
        call s:assert.is_not_blob(v:null)
      End
      It throws a report when the type of value is a blob
        call s:check_throw('is_not_blob', [test_null_blob()], 'The type of value was not expected to be blob')
      End
      It returns truthy value when the check was successful
        call s:assert.truthy(s:assert.is_not_blob(v:null))
      End
      It accepts an optional message
        call s:assert.is_not_blob(v:null, 'error message')
        call s:check_throw('is_not_blob', [test_null_blob(), 'error message'], 'error message')
      End
    End
  endif

  Describe .type_of()
    It checks the type of value
      call s:assert.type_of(0, 'Number')
      call s:assert.type_of('', 'String')
      call s:assert.type_of([], 'List')
      call s:assert.type_of({}, 'Dict')
      call s:assert.type_of({}, 'Dictionary')
      call s:assert.type_of(0.0, 'Float')
    End
    It accepts a name of the type as case insensitive
      call s:assert.type_of(0, 'Number')
      call s:assert.type_of(0, 'NUMBER')
      call s:assert.type_of(0, 'NuMbEr')
    End
    It accepts one or more names from a list
      call s:assert.type_of(0, ['Number'])
      call s:assert.type_of(0, ['Number', 'String', 'Float'])
      call s:assert.type_of('', ['Number', 'String', 'Float'])
      call s:assert.type_of(0.0, ['Number', 'String', 'Float'])
    End
    It throws a report when the type is mismatched
      call s:check_throw('type_of', [0.0, 'Number'], 'The type of value was expected to be number')
      call s:check_throw('type_of', ['0', ['Number', 'Float']], 'The type of value was expected to be one of number or float')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.type_of('', 'string'))
    End
    It accepts an optional message
      call s:assert.type_of(0, 'Number', 'error message')
      call s:check_throw('type_of', [0.0, 'Number', 'error message'], 'error message')
    End
  End

  Describe .length_of()
    It checks the length of a string
      call s:assert.length_of('12345', 5)
    End
    It checks the length of a list
      call s:assert.length_of([1, 2, 3], 3)
    End
    It checks the length of a dictionary
      call s:assert.length_of({'elem': 1}, 1)
    End
    It checks the length of a blob
      if !exists('v:t_blob')
        Skip Blob not supported.
      endif
      call s:assert.length_of(0zDEADBEEF, 4)
    End
    It throws a report when the length is mismatched
      call s:check_throw('length_of', ['', 1], 'The length of value was expected to the specified length')
      call s:check_throw('length_of', [[], 1], 'The length of value was expected to the specified length')
      call s:check_throw('length_of', [{}, 1], 'The length of value was expected to the specified length')
      if exists('v:t_blob')
        call s:check_throw('length_of', [0z, 1], 'The length of value was expected to the specified length')
      endif
    End
    It throws a report when the first argument is not valid
      call s:check_throw('length_of', [0, 1], 'The type of value was expected to be one of string, list, dictionary or blob')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.length_of('', 0))
    End
    It accepts an optional message
      call s:assert.length_of('12345', 5, 'error message')
      call s:check_throw('length_of', ['', 1, 'error message'], 'error message')
    End
  End

  Describe .has_key()
    It checks key exists in a dictionary
      call s:assert.has_key({'foo': 0}, 'foo')
    End
    It checks index exists in a list
      call s:assert.has_key([1, 2, 3], 2)
    End
    It throws a report when the key does not exist in the dictionary
      call s:check_throw('has_key', [{}, 'foo'], 'The dictionary was expected to have a key')
    End
    It throws a report when the index does not exist in the list
      call s:check_throw('has_key', [[], 0], 'The array was expected to have a index')
    End
    It throws a report when the first argument is not a dictionary or a list
      call s:check_throw('has_key', ['foo', 0], 'The first argument was expected to an array or a dict')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.has_key({'foo': 0}, 'foo'))
    End
    It accepts an optional message
      call s:assert.has_key({'foo': 0}, 'foo', 'error message')
      call s:check_throw('has_key', [{}, 'foo', 'error message'], 'error message')
      call s:check_throw('has_key', [[], 0, 'error message'], 'error message')
      call s:check_throw('has_key', ['foo', 0, 'error message'], 'error message')
    End
  End

  Describe .key_exists()
    It checks key exists in the dictionary
      call s:assert.key_exists({'foo': 0}, 'foo')
    End
    It throws a report when the key does not exist in the dictionary
      call s:check_throw('key_exists', [{}, 'foo'], 'It was expected that a key exists in the dictionary')
    End
    It throws a report when the first argument is not a dictionary
      call s:check_throw('key_exists', ['foo', 0], 'The type of value was expected to be dictionary')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.key_exists({'foo': 0}, 'foo'))
    End
    It accepts an optional message
      call s:assert.key_exists({'foo': 0}, 'foo', 'error message')
      call s:check_throw('key_exists', [{}, 'foo', 'error message'], 'error message')
      call s:check_throw('key_exists', ['foo', 0, 'error message'], 'error message')
    End
  End

  Describe .key_not_exists()
    It checks key does not exist in the dictionary
      call s:assert.key_not_exists({'foo': 0}, 'bar')
    End
    It throws a report when the key exists in the dictionary
      call s:check_throw('key_not_exists', [{'foo': 0}, 'foo'], 'It was expected that a key does not exist in the dictionary')
    End
    It throws a report when the first argument is not a dictionary
      call s:check_throw('key_not_exists', ['foo', 0], 'The type of value was expected to be dictionary')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.key_not_exists({'foo': 0}, 'bar'))
    End
    It accepts an optional message
      call s:assert.key_not_exists({'foo': 0}, 'bar', 'error message')
      call s:check_throw('key_not_exists', [{'foo': 0}, 'foo', 'error message'], 'error message')
      call s:check_throw('key_not_exists', ['foo', 0, 'error message'], 'error message')
    End
  End

  Describe .exists()
    It throws a report when the value does not exist
      call s:check_throw('exists', ['g:the_value_which_does_not_exist'], 'The target was expected to exist')
    End
    It does not throw a report when the value exists
      let g:the_value_which_exists = 1
      call s:assert.exists('g:the_value_which_exists')
      unlet g:the_value_which_exists
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.exists('*function'))
    End
    It accepts an optional message
      let g:the_value_which_exists = 1
      call s:assert.exists('g:the_value_which_exists', 'error message')
      unlet g:the_value_which_exists
      call s:check_throw('exists', ['g:the_value_which_does_not_exist', 'error message'], 'error message')
    End
  End

  Describe .not_exists()
    It throws a report when the value exists
      let g:the_value_which_exists = 1
      call s:check_throw('not_exists', ['g:the_value_which_exists'], 'The target was expected to not exist')
      unlet g:the_value_which_exists
    End
    It does not throw a report when the value not exist
      call s:assert.not_exists('g:the_value_which_does_not_exist')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.not_exists('*non_exist_function'))
    End
    It accepts an optional message
      call s:assert.not_exists('g:the_value_which_does_not_exist', 'error message')
      let g:the_value_which_exists = 1
      call s:check_throw('not_exists', ['g:the_value_which_exists', 'error message'], 'error message')
      unlet g:the_value_which_exists
    End
  End

  Describe .cmd_exists()
    It throws a report when the Ex command does not exist
      call s:check_throw('cmd_exists', ['NotExistCommand'], 'The Ex command was expected to exist')
    End
    It does not throw a report when the Ex command exists
      command! TestCommandThatExist :
      call s:assert.cmd_exists('TestCommandThatExist')
      delcommand TestCommandThatExist
    End
    It allows ":" at the head
      command! TestCommandThatExist :
      call s:assert.cmd_exists(':TestCommandThatExist')
      delcommand TestCommandThatExist
    End
    It throws a report when the Ex command is part of existing command
      command! TestCommandThatExist :
      call s:assert.cmd_exists('TestCommandThatExist')
      call s:check_throw('cmd_exists', ['TestCommand'], 'The Ex command was expected to exist')
      delcommand TestCommandThatExist
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.cmd_exists('command'))
    End
    It accepts an optional message
      call s:assert.cmd_exists('command', 'error message')
      call s:check_throw('cmd_exists', ['NotExistCommand', 'error message'], 'error message')
    End
  End

  Describe .cmd_not_exists()
    It throws a report when the Ex command exists
      command! TestCommandThatExist :
      call s:check_throw('cmd_not_exists', ['TestCommandThatExist'], 'The Ex command was expected to not exist')
      delcommand TestCommandThatExist
    End
    It does not throw a report when the Ex command does not exist
      call s:assert.cmd_not_exists('NotExistCommand')
    End
    It allows ":" at the head
      call s:assert.cmd_not_exists(':NotExistCommand')
    End
    It does not throw a report when the ex command is part of existing command
      command! TestCommandThatExist :
      call s:assert.cmd_not_exists('TestCommand')
      call s:check_throw('cmd_not_exists', ['TestCommandThatExist'], 'The Ex command was expected to not exist')
      delcommand TestCommandThatExist
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.cmd_not_exists('NotExistCommand'))
    End
    It accepts an optional message
      call s:assert.cmd_not_exists('NotExistCommand', 'error message')
      call s:check_throw('cmd_not_exists', ['command', 'error message'], 'error message')
    End
  End

  Describe .empty()
    It throws a report when the value is not empty
      call s:check_throw('empty', [[1, 2, 3]], 'The target was expected to be empty')
    End
    It passes when the value is empty
      call s:assert.empty([])
      call s:assert.empty({})
      call s:assert.empty('')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.empty([]))
    End
    It accepts an optional message
      call s:assert.empty([], 'error message')
      call s:check_throw('empty', [[1, 2, 3], 'error message'], 'error message')
    End
  End

  Describe .not_empty()
    It throws a report when the value is empty
      call s:check_throw('not_empty', [[]], 'The target was expected not to be empty')
      call s:check_throw('not_empty', [{}], 'The target was expected not to be empty')
      call s:check_throw('not_empty', [''], 'The target was expected not to be empty')
    End
    It passes when the value is empty
      call s:assert.not_empty([1, 2, 3])
      call s:assert.not_empty({1 : 'a'})
      call s:assert.not_empty('foo')
    End
    It returns truthy value when the check was successful
      call s:assert.truthy(s:assert.not_empty([1, 2, 3]))
    End
    It accepts an optional message
      call s:assert.not_empty([1, 2, 3], 'error message')
      call s:check_throw('not_empty', [[], 'error message'], 'error message')
    End
  End

End

function s:check_throw(target, args, ...) abort
  let expected_exception = a:0 ? a:1 : '^themis:\s*report:\s*failure:.*$'
  let not_thrown = 0
  try
    call call(s:assert[a:target], a:args, s:assert)
    let not_thrown = 1
  catch
    if v:exception !~# expected_exception
      throw printf('themis: report: failure: assert.%s() threw a wrong exception: %s', a:target, v:exception)
    endif
  endtry
  if not_thrown
    throw printf('themis: report: failure: assert.%s(%s) did not throw any exception.', a:target, string(a:args)[1 : -2])
  endif
endfunction
