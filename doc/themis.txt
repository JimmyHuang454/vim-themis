*themis.txt*	A testing framework for Vim script.

Version: 1.0
Author : thinca <thinca+vim@gmail.com>
License: zlib License

==============================================================================
CONTENTS					*themis-contents*

INTRODUCTION			|themis-introduction|
USAGE				|themis-usage|
INTERFACE			|themis-interface|
  EXTERNAL COMMANDS		  |themis-external-commands|
  FUNCTIONS			  |themis-functions|
CUSTOMIZING			|themis-customizing|
WRITE TEST			|themis-write-test|
  QUICKREF			  |themis-quickref|
HELPER				|themis-helper|
  ASSERT			  |themis-helper-assert|
REPORTER			|themis-reporter|
TEST RULE			|themis-test-rule|
  EXCEPTION			  |themis-rule-exception|
  TEST NAME			  |themis-rule-test-name|
CHANGELOG			|themis-changelog|



==============================================================================
INTRODUCTION					*themis-introduction*

*themis.vim* is a testing framework for Vim script.

- Run tests by command line.
- A result can be outputted in the some formats.
- Simply a test fails when an exception is thrown.
- You can write tests in some styles. (in future)



Requirements:
- Vim 7.4 or later

Latest version:
https://github.com/thinca/vim-themis



==============================================================================
USAGE						*themis-usage*

1. Installation
This plugin can install by same way of other general plugins.  You can use
your favorite way.
And, you need install `themis` command.  This command is in `bin/themis`(or
`bin/themis.bat` in MS Windows environment) of the plugin package.  You can
take some methods.
	i.   Through the $PATH to the bin/ directory.
	ii.  Make a symbolic link to `bin/themis` from your bin directory.
	iii. Copy `bin/themis` to your bin directory and set |$THEMIS_HOME|.


2. Write tests
Test is a Vim script like the following.
>
	let s:suite = themis#suite('Test for my plugin')
	let s:assert = themis#helper('assert')

	" The function name(my_test_1) will be a test name.
	function! s:suite.my_test_1()
	  call s:assert.equals(3, 1 + 2)
	endfunction

	function! s:suite.my_test_2()
	  call s:assert.equals(8, 2 * 4)
	endfunction
	function! s:suite.my_fail_test()
	  call s:assert.fail('this will fail')
	endfunction
<
	See |themis-write-test| for detail.

3. Run the test
Run the test by command line.
>
	$ cd /path/to/your-plugin
	$ themis test.vim
<
4. You get the result
>
	ok 1 - my_test_1
	ok 2 - my_test_2
	not ok 3 - my_fail_test
	# this will fail

	# tests 3
	# pass 2
	# fail 1
<


==============================================================================
INTERFACE					*themis-interface*

------------------------------------------------------------------------------
EXTERNAL COMMANDS				*themis-external-commands*

						*bin/themis*
bin/themis [options] [script]...
	Runs tests.  If a directory is passed to [script], uses all "*.vim"
	files in the directory.
	When [script] is omitted, one of the "./test", "./t", or "./spec" is
	automatically used.
	Current directory is appended to 'runtimepath' automatically.
	If test fails or error occurs, exit status becomes non zero.

	--exclude {pattern}			*themis-option-exclude*
		Exclude script files which matched the {pattern}.
		{pattern} is a |regular-expression|.

	-r, --recursive				*themis-option-recursive*
		Include sub directories.

	--reporter {reporter}			*themis-option-reporter*
		Specifies a reporter(|themis-reporter|).

	--runtimepath {runtimepath}		*themis-option-runtimepath*
		Add 'runtimepath'.  Two or more specification is possible.


------------------------------------------------------------------------------
FUNCTIONS					*themis-functions*

Following functions are utilities for test script.

themis#suite([{name}])				*themis#suite()*
	Creates and returns a new test suite.
	If a suite named {name} already exists, just returns it.

themis#helper({name})				*themis#helper()*
	Use a helper.
	This creates or enables the {name} helper.  See also |themis-helper|.



==============================================================================
CUSTOMIZING					*themis-customizing*

$THEMIS_HOME					*$THEMIS_HOME*
	The home directory of themis.  The home directory is a base of
	runtimepath.
	When you copy the `themis` command to another place and use it, you
	have to set this environment variable.

$THEMIS_VIM					*$THEMIS_VIM*
	The path to vim command.  "vim" is used when this is empty.



==============================================================================
WRITE TEST					*themis-write-test*

First, make a "test" directory in your project.
You can put tests in favorite place, but "test" directory is read in default.
>
	$ cd /path/to/your-plugin-project
	$ mkdir test
<
Create a new test script.
>
	$ vim test/your-test.vim
<
And write a test.  There is a sample with explanation comment.
>
	" In a file, create a suite at first.
	let s:suite = themis#suite('test title')
	" In many cases, helper is convenient.
	let s:assert = themis#helper('assert')

	" Define a function to suite.
	" This function is a test.
	" Function name becomes a title of test.  In this case, "my_test".
	function! s:suite.my_test_1()
	  " Check the calculation result
	  let value = 1 + 2
	  call s:assert.equals(value, 3)
	endfunction
<

------------------------------------------------------------------------------
QUICKREF					*themis-quickref*

There is a quick reference for writing test.

Assert Helper >
	let s:assert = themis#helper('assert')

Force fail and skip
|themis-helper-assert-fail()| / |themis-helper-assert-skip()|
Check values
|themis-helper-assert-true()| / |themis-helper-assert-false()|
|themis-helper-assert-truthy()| / |themis-helper-assert-falsy()|
|themis-helper-assert-compare()|
|themis-helper-assert-equals()| / |themis-helper-assert-not_equals()|
|themis-helper-assert-same()| / |themis-helper-assert-not_same()|
|themis-helper-assert-match()| / |themis-helper-assert-not_match()|
Check types
|themis-helper-assert-is_number()| / |themis-helper-assert-is_not_number()|
|themis-helper-assert-is_string()| / |themis-helper-assert-is_not_string()|
|themis-helper-assert-is_func()| / |themis-helper-assert-is_not_func()|
|themis-helper-assert-is_list()| / |themis-helper-assert-is_not_list()|
|themis-helper-assert-is_dict()| / |themis-helper-assert-is_not_dict()|
|themis-helper-assert-is_float()| / |themis-helper-assert-is_not_float()|
Others
|themis-helper-assert-exists()|



==============================================================================
HELPER						*themis-helper*

Helper supports writing your test.
To use a helper, writes as follows. >
	let s:helper = themis#helper(helper_name)

------------------------------------------------------------------------------
ASSERT						*themis-helper-assert*

Assert-helper provides some useful functions for checking value.
These functions will throw an appropriate exception if check fails.
Check |themis-rule-exception| if you want to know the detail of exception.

assert.fail({message})			*themis-helper-assert-fail()*
	Fails a test with {message}.

assert.skip({message})			*themis-helper-assert-skip()*
	Pass a test as SKIP with {message}.

assert.true({value})			*themis-helper-assert-true()*
	Checks {value} is 1.

assert.false({value})			*themis-helper-assert-false()*
	Checks {value} is 0.

assert.truthy({value})			*themis-helper-assert-truthy()*
	Checks {value} is truthy value.

assert.falsy({value})			*themis-helper-assert-falsy()*
	Checks {value} is falsy value.

assert.compare({left}, {op}, {right})	*themis-helper-assert-compare()*
	Compares {left} value and {right} value by {op}. >
	assert.compare(10, '<', 20)

assert.equals({actual}, {expect})	*themis-helper-assert-equals()*
	Checks an {actual} equals to an {expect}.  (|==#|)

assert.not_equals({actual}, {expect})	*themis-helper-assert-not_equals()*
	Checks an {actual} not equals to an {expect}.  (|!=#|)

assert.same({actual}, {expect})		*themis-helper-assert-same()*
	Checks an {actual} sames to an {expect}.  (|is#|)

assert.not_same({actual}, {expect})	*themis-helper-assert-not_same()*
	Checks an {actual} not sames to an {expect}.  (|isnot#|)

assert.match({value}, {pattern})	*themis-helper-assert-match()*
	Checks {value} matches to {pattern}.  (|=~#|)

assert.not_match({value}, {pattern})	*themis-helper-assert-not_match()*
	Checks {value} doesn't matches to {pattern}.  (|!~#|)

assert.is_number({value})		*themis-helper-assert-is_number()*
	Checks type of {value} is |Number|.

assert.is_not_number({value})		*themis-helper-assert-is_not_number()*
	Checks type of {value} is not |Number|.

assert.is_string({value})		*themis-helper-assert-is_string()*
	Checks type of {value} is String.

assert.is_not_string({value})		*themis-helper-assert-is_not_string()*
	Checks type of {value} is not String.

assert.is_func({value})			*themis-helper-assert-is_func()*
	Checks type of {value} is |Funcref|.

assert.is_not_func({value})		*themis-helper-assert-is_not_func()*
	Checks type of {value} is not |Funcref|.

assert.is_list({value})			*themis-helper-assert-is_list()*
	Checks type of {value} is |List|.

assert.is_not_list({value})		*themis-helper-assert-is_not_list()*
	Checks type of {value} is not |List|.

assert.is_dict({value})			*themis-helper-assert-is_dict()*
	Checks type of {value} is |Dictionary|.

assert.is_not_dict({value})		*themis-helper-assert-is_not_dict()*
	Checks type of {value} is not |Dictionary|.

assert.is_float({value})		*themis-helper-assert-is_float()*
	Checks type of {value} is |Float|.

assert.is_not_float({value})		*themis-helper-assert-is_not_float()*
	Checks type of {value} is not |Float|.

assert.exists({expr})			*themis-helper-assert-exists()*
	Checks {expr} by |exists()|.
	Note that this can not use for |local-variable| and |script-variable|.



==============================================================================
REPORTER					*themis-reporter*

Reporter reports the result of tests by each format.
You can specifies a reporter by |themis-option-reporter|.

------------------------------------------------------------------------------

tap						*themis-reporter-tap*
Report by TAP(Test Anything Protocol) format.  (http://testanything.org/)

dot						*themis-reporter-dot*
Report by dot style.

spec						*themis-reporter-spec*
Report by spec style.



==============================================================================
TEST RULE					*themis-test-rule*

An unit of a test is a function with no argument.
A result of a test becomes either of following.

- pass
- fail
- pending

See |themis-rule-exception| for detail of result.
A test suite is a |Dictionary| that has some test functions.


------------------------------------------------------------------------------
EXCEPTION					*themis-rule-exception*

If a test throws an exception, the test fails.
Some specialized patterns are processed by themis.
>
	themis: report: {type}: {message}
<
When all characters of {type} are uppercase, a test treated as "pending".


------------------------------------------------------------------------------
TEST NAME					*themis-rule-test-name*

The key name of a suite is test name.
Some test names have a special meaning.  They are called in special situation.

- before()
  - This is called before a first test of this suite.
- before_each(name)
  - This is called before each test of this suite.
- after_each(name)
  - This is called before each test of this suite.
- after()
  - This is called after a last test of this suite.
- __XXX__()
  - XXX is any string.
  - This is called before the all test.
  - You can make nested suite in this function.  >
	let s:parent = themis#suite('parent')
	function! s:parent.__child__()
	  let child = themis#suite('child')
	  function! child.test()
	    " Test code here...
	  endfunction
	endfunction



==============================================================================
CHANGELOG					*themis-changelog*

1.0	2014-06-30
	- Initial version.



==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
